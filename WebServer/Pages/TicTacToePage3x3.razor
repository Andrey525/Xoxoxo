@page "/tictactoe3x3"

@using WebServer.Data
@using Intellectual
@using TicTacToeLib
@implements IDisposable

@inject NavigationManager NavigationManager

<PageTitle>TicTacToe</PageTitle>

<div id="game-screen" class="center">
  <h2 align="center">TicTacToe Game</h2>
  @if (!Game.IsStarted)
  {
        <table class="center">
            <tr>
        <td>
            <button type="button" id="choose-value" @onclick="async () => { Game.XMove += MakeMove; Game.OMove += Bot.MakeMove; Game.GameStateUpdate += StateHasChanged; Game.Init(LineSize); await Game.Run(); }">Choose X</button>
        </td>
        <td>
            <button type="button" id="choose-value"  @onclick="async () => { Game.OMove += MakeMove; Game.XMove += Bot.MakeMove; Game.GameStateUpdate += StateHasChanged; Game.Init(LineSize); await Game.Run(); }">Choose O</button>
        </td>
    </tr>
    </table>
  }
  else
  {
    <table class="center">
        @for (int i = 0; i < Game.LineSize; i++)
        {
            <tr>
             @for (int j = 0; j < Game.LineSize; j++)
             {
                <td>
                  @if (Game.GetValue(i, j) == TicTacToeValue.No)
                  {
                        int row = i, col = j;
                        <button type="button" class="cell" @onclick="() => { _nextMoveRow = row; _nextMoveCol = col; if (semaphoreSlim.CurrentCount == 0) semaphoreSlim.Release(1); }"></button>
                  }
                  else
                  {
                        <button type="button" class="cell">@Game.GetValue(i, j)</button>
                  }
                </td>
             }
            </tr>
        }
  </table>
  <button type="button" id="restart" @onclick=@ReloadPage>Restart</button> 
  }
  @if (Game.IsOvered)
    {
        <h2 align="center">Winner: @Game.Winner</h2>
    }
    
</div>

@code {
    [Inject] Game? Game { get; set; }
    [Inject] Bot? Bot { get; set; }
    const int LineSize = 3;
    int _nextMoveRow;
    int _nextMoveCol;
    SemaphoreSlim semaphoreSlim;

    protected override void OnInitialized()
    {
        Bot.Game = Game;

        Bot.ChangeHelper(typeof(RemoteHelper));

        semaphoreSlim = new SemaphoreSlim(1, 1);
        semaphoreSlim.WaitAsync();
    }

    private void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    public void Dispose()
    {
        
    }

    private async Task<Point> MakeMove()
    {
        await semaphoreSlim.WaitAsync();
        return new Point(_nextMoveRow, _nextMoveCol);
    }
}