@page "/tictactoe"

@using TicTacToeLib
@using WebServer.Data
@using Intellectual

@inject NavigationManager NavigationManager
@inject GrpcChannel Channel
@inject ILogger<TicTacToePage> _logger

<PageTitle>TicTacToe</PageTitle>

<h3 class=""></h3>
 
<div id="game-screen" class="center">
  <h2 align="center">TicTacToe Game</h2>
  <table class="center">
    <tr>
      <td>
        @if (_gameModel.Table[0, 0] == TicTacToeValue.No)
        {
            <button type="button" class="cell" @onclick="() => Handle(0, 0)"></button>
        }
        else
        {
            <button type="button" class="cell">@_gameModel.Table[0, 0]</button>
        }
      </td>
      <td>
        @if (_gameModel.Table[0, 1] == TicTacToeValue.No)
        {
            <button type="button" class="cell" @onclick="() => Handle(0, 1)"></button>
        }
        else
        {
            <button type="button" class="cell">@_gameModel.Table[0, 1]</button>
        }
      </td>
      <td>
        @if (_gameModel.Table[0, 2] == TicTacToeValue.No)
        {
            <button type="button" class="cell" @onclick="() => Handle(0, 2)"></button>
        }
        else
        {
            <button type="button" class="cell">@_gameModel.Table[0, 2]</button>
        }
      </td>
    </tr>
    <tr>
      <td>
        @if (_gameModel.Table[1, 0] == TicTacToeValue.No)
        {
            <button type="button" class="cell" @onclick="() => Handle(1, 0)"></button>
        }
        else
        {
            <button type="button" class="cell">@_gameModel.Table[1, 0]</button>
        }
      </td>
      <td>
        @if (_gameModel.Table[1, 1] == TicTacToeValue.No)
        {
            <button type="button" class="cell" @onclick="() => Handle(1, 1)"></button>
        }
        else
        {
            <button type="button" class="cell">@_gameModel.Table[1, 1]</button>
        }
      </td>
      <td>
        @if (_gameModel.Table[1, 2] == TicTacToeValue.No)
        {
            <button type="button" class="cell" @onclick="() => Handle(1, 2)"></button>
        }
        else
        {
            <button type="button" class="cell">@_gameModel.Table[1, 2]</button>
        }
      </td>
    </tr>
    <tr>
      <td>
        @if (_gameModel.Table[2, 0] == TicTacToeValue.No)
        {
            <button type="button" class="cell" @onclick="() => Handle(2, 0)"></button>
        }
        else
        {
            <button type="button" class="cell">@_gameModel.Table[2, 0]</button>
        }
      </td>
      <td>
        @if (_gameModel.Table[2, 1] == TicTacToeValue.No)
        {
            <button type="button" class="cell" @onclick="() => Handle(2, 1)"></button>
        }
        else
        {
            <button type="button" class="cell">@_gameModel.Table[2, 1]</button>
        }
      </td>
      <td>
        @if (_gameModel.Table[2, 2] == TicTacToeValue.No)
        {
            <button type="button" class="cell" @onclick="() => Handle(2, 2)"></button>
        }
        else
        {
            <button type="button" class="cell">@_gameModel.Table[2, 2]</button>
        }
      </td>
    </tr>
  </table>
  <button type="button" id="restart" @onclick=@ReloadPage>Restart</button>
</div>

@if (_gameModel.State != TicTacToeState.WaitXMove &&
     _gameModel.State != TicTacToeState.WaitOMove)
{
    <h2 align="center">Game over! @_gameModel.State</h2>   
}

@code {
    private TicTacToeModel _gameModel;
    private TicTacToeBot _bot;

    private void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    protected override void OnInitialized()
    {
        var grpcClient = new IntellectService.IntellectServiceClient(Channel);
        _gameModel = new TicTacToeModel(TicTacToeValue.X);
        _bot = new TicTacToeBot(grpcClient);
    }

    private async void Handle(int row, int col)
    {
        _logger.LogInformation($"Filed {row}:{col} clicked");

        _logger.LogInformation(_gameModel.State.ToString());
        if (_gameModel.State == TicTacToeState.WaitXMove)
        {
            try
            {
                _gameModel.MakeMove(row, col, TicTacToeValue.X);
                _logger.LogInformation(_gameModel.State.ToString());

                if (_gameModel.State != TicTacToeState.WaitOMove)
                    return;

                Tuple<int, int> coord;
                try
                {
                    coord = await _bot.ThinkAboutHowToMove(_gameModel);
                }
                catch (Exception e)
                {
                    _logger.LogError(e.Message);
                    return;
                }

                _logger.LogInformation(coord.Item1.ToString() + coord.Item2.ToString());
                _gameModel.MakeMove(coord.Item1, coord.Item2, TicTacToeValue.O);
                StateHasChanged();
                if (_gameModel.State != TicTacToeState.WaitXMove)
                    return;
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
            }
        }
    }
}